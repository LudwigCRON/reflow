#!/usr/bin/env python3
# coding: utf-8

import os
import sys
import signal
import shutil
import argparse

from pathlib import Path
from importlib import import_module

# assume the run utility is placed in the envs/bin/ directory
ENVBIN_DIR = os.path.dirname(os.path.realpath(__file__))
# current execution path
CURRENT_DIR = os.getcwd()
# define the path where is stored the flow
REFLOW_DIR = os.path.normpath(os.path.join(ENVBIN_DIR, "../../"))
sys.path.append(REFLOW_DIR)

import common.utils as utils
import common.relog as relog
import common.read_sources as reader

# load a local configuration if there is one
local_config = None
for file in Path(CURRENT_DIR).rglob("*.config"):
    local_config = str(file)
    break
# or the default configuration
default_config = os.path.join(REFLOW_DIR, "./default.config")
# export environment variables
os.environ["REFLOW"] = REFLOW_DIR
os.environ["DEFAULT_CONFIG"] = default_config
os.environ["LOCAL_FLOW_CONFIG"] = local_config
os.environ["CONFIG_PATH"] = default_config if local_config is None else local_config

if __name__ == "__main__":
    # signal handling (kill, ctrl+c, ...)
    make_process = None
    def stop_process():
        if make_process is not None:
            make_process.kill()
    signal.signal(signal.SIGINT, stop_process)
    # parse command line arguments
    margs = {
        "sim": "run a simulation",
        "cov": "run a coverage simulation",
        "lint": "apply lint checks on a design",
        "tree": "display the design tree",
        "view-sim": "display waveforms",
        "view-cov": "display coverage results",
        "synth": "synthesize a design"
    }
    arguments = ["--%s" % arg if arg in margs.keys() else arg for arg in sys.argv[1:]]
    parser = argparse.ArgumentParser(description="Reflow Unified ruNner")
    parser.add_argument("-c", "--clean",
                        help="clean working directory", action="store_true", default=False)
    for key, desc in margs.items():
        parser.add_argument("--%s" % key, help=desc, action="store_true", default=False)
    args = parser.parse_args(arguments)
    # load the configuration
    config = utils.read_config(os.environ["CONFIG_PATH"])
    os.environ["TECH_LIB"] = config["TECH_LIB"]
    # clean tmp files
    if args.clean:
        for work_dir in Path(CURRENT_DIR).rglob("**/.tmp_sim"):
            print(work_dir)
            shutil.rmtree(work_dir)
    # check lint error on the design
    if args.lint:
        relog.step("Listing files")
        files, params = reader.read_from(CURRENT_DIR)
        # load the simulator script
        tool_path = utils.find_tool(config["DIG_SIMULATOR_TOOL"])
        sys.path.append(os.path.dirname(tool_path))
        linter = import_module(config["DIG_SIMULATOR_TOOL"])
        # execute
        linter.main(files, params, lint=True)
    # run a simulation
    if args.sim:
        relog.step("Listing files")
        files, params = reader.read_from(CURRENT_DIR)
        # load the simulator script
        tool_path = utils.find_tool(config["DIG_SIMULATOR_TOOL"])
        sys.path.append(os.path.dirname(tool_path))
        simulator = import_module(config["DIG_SIMULATOR_TOOL"])
        # execute
        simulator.main(files, params)
    # show waveforms
    if args.view_sim:
        # load the simulator script
        tool_path = utils.find_tool(config["WAVEFORM_VIEWER"])
        sys.path.append(os.path.dirname(tool_path))
        waveform = import_module(config["WAVEFORM_VIEWER"])
        # execute
        waveform.main("vcd")
    # synthesis
    if args.synth:
        relog.step("Listing files")
        files, params = reader.read_from(CURRENT_DIR)
        # load the simulator script
        tool_path = utils.find_tool(config["DIG_SYNTHESIS_TOOL"])
        sys.path.append(os.path.dirname(tool_path))
        synthesizor = import_module(config["DIG_SYNTHESIS_TOOL"])
        # execute
        synthesizor.main(files, params, "verilog")
