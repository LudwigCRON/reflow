#!/usr/bin/env python3
# coding: utf-8

import os
import sys
import time
import signal
import shutil
import argparse

from pathlib import Path
from datetime import datetime
from importlib import import_module

# assume the run utility is placed in the envs/bin/ directory
ENVBIN_DIR = os.path.dirname(os.path.realpath(__file__))
# current execution path
CURRENT_DIR = os.getcwd()
# define the path where is stored the flow
REFLOW_DIR = os.path.normpath(os.path.join(ENVBIN_DIR, "../../"))
sys.path.append(REFLOW_DIR)

import common.utils as utils
import common.relog as relog
import common.read_sources as read_sources
import common.design_tree as design_tree
import common.read_batch as read_batch

# load a local configuration if there is one
local_config = None
for file in Path(CURRENT_DIR).rglob("*.config"):
    local_config = str(file)
    break
# or the default configuration
default_config = os.path.join(REFLOW_DIR, "./default.config")
# export environment variables
os.environ["REFLOW"] = REFLOW_DIR
os.environ["DEFAULT_CONFIG"] = default_config
os.environ["LOCAL_FLOW_CONFIG"] = "" if local_config is None else local_config
os.environ["CONFIG_PATH"] = default_config if local_config is None else local_config

if __name__ == "__main__":
    # signal handling (kill, ctrl+c, ...)
    make_process = None

    def stop_process():
        if make_process is not None:
            make_process.kill()

    signal.signal(signal.SIGINT, stop_process)
    # parse command line arguments
    margs = {
        "clean": "clean working directory",
        "batch": "perform a list of simulations Batch.list",
        "sim": "run a simulation",
        "cov": "run a coverage simulation",
        "lint": "apply lint checks on a design",
        "tree": "display the design tree",
        "view-sim": "display waveforms",
        "view-cov": "display coverage results",
        "synth": "synthesize a design",
        "report": "generate an html report of executed simulations and their stats"
    }
    arguments = ["--%s" % arg if arg in margs.keys() else arg for arg in sys.argv[1:]]
    parser = argparse.ArgumentParser(
        description=(
            "Reflow Unified ruNner\n"
            "---------------------\n"
            "\n"
            "For arguments starting with by double dash --,"
            "the double dashes can be omitted."
            "\n"
            "ex: 'run sim' is equal to 'run --sim'\n"
        ),
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("-c", "--clean",
                        help="clean working directory", action="store_true", default=False)
    parser.add_argument("-b", "--batch",
                        help="perform a list of simulations Batch.list", action="store_true", default=False)
    group = parser.add_mutually_exclusive_group()
    for key, desc in margs.items():
        if key not in ["clean", "batch"]:
            group.add_argument("--%s" % key, help=desc, action="store_true", default=False)
    args = parser.parse_args(arguments)
    # if not arguments is provided print help
    if not any(dict(args._get_kwargs()).values()):
        parser.print_help()
    # load the configuration
    config = utils.read_config(os.environ["CONFIG_PATH"])
    os.environ["TECH_LIB"] = config.get("TECH_LIB", "")
    # clean tmp files
    if args.clean:
        for work_dir in Path(CURRENT_DIR).rglob("**/.tmp_sim"):
            shutil.rmtree(work_dir)
        for work_dir in Path(CURRENT_DIR).rglob("**/.tmp_cov"):
            shutil.rmtree(work_dir)
        for work_dir in Path(CURRENT_DIR).rglob("**/.tmp_lint"):
            shutil.rmtree(work_dir)
        for work_dir in Path(CURRENT_DIR).rglob("**/.tmp_batch"):
            shutil.rmtree(work_dir)
    # perform a collection of simulation
    if args.batch:
        # define working directory
        os.environ["WORK_DIR"] = os.path.join(CURRENT_DIR, "./.tmp_batch/")
        # run simulations
        t_start = time.time() * 1000.0
        read_batch.main(CURRENT_DIR, args.sim, args.cov, args.lint)
        t_end = time.time() * 1000.0
        # remove previous stats
        if os.path.exists("./.tmp_batch/batch.stats"):
            os.remove("./.tmp_batch/batch.stats")
        # cumulate stats
        db_batch = {}
        for stats_path in Path(CURRENT_DIR).rglob("**/*.stats"):
            with open(stats_path, "r+") as fp:
                db_sim = dict((line.split(':', 1) for i, line in enumerate(fp) if ':' in line and i > 0))
            for k, v in db_sim.items():
                tmp = db_batch[k] if k in db_batch else 0
                try:
                    db_batch[k] = float(v) + tmp
                except ValueError:
                    relog.error("%s values should be number" % stats_path)
        # store statistics
        with open(os.path.join(utils.get_tmp_folder(), "./batch.stats"), "w+") as fp:
            fp.write("%s\n" % datetime.now())
            fp.write("Warnings: %d\n" % db_batch["Warnings"])
            fp.write("Errors: %d\n" % db_batch["Errors"])
            fp.write("Sim. Time: %d\n" % (t_end - t_start))
        exit(0)
    # check lint error on the design
    if args.lint:
        # define working directory
        os.environ["WORK_DIR"] = os.path.join(CURRENT_DIR, "./.tmp_lint/")
        # run lint
        relog.step("Listing files")
        files, params = read_sources.read_from(CURRENT_DIR)
        # load the simulator script
        tool_path = utils.find_tool(config["DIG_SIMULATOR_TOOL"])
        sys.path.append(os.path.dirname(tool_path))
        linter = import_module(config["DIG_SIMULATOR_TOOL"])
        # execute
        t_start = time.time() * 1000.0
        stats = linter.main(files, params, lint=True)
        # store statistics
        with open(os.path.join(utils.get_tmp_folder(), "./lint.stats"), "w+") as fp:
            fp.write("%s\n" % datetime.now())
            fp.write("Warnings: %d\n" % stats[0])
            fp.write("Errors: %d\n" % stats[1])
            fp.write("Sim. Time: %d\n" % (t_end - t_start))
    # display hierarchy of the design
    if args.tree:
        relog.step("Listing files")
        files, params = read_sources.read_from(CURRENT_DIR)
        design_tree.main(files, params)
    # run a simulation
    if args.sim:
        # define working directory
        os.environ["WORK_DIR"] = os.path.join(CURRENT_DIR, "./.tmp_sim/")
        # run simulation
        relog.step("Listing files")
        files, params = read_sources.read_from(CURRENT_DIR)
        # determine the simulation type
        IS_DIG_SIM = all((read_sources.is_digital(file) for file, _ in files))
        if not IS_DIG_SIM:
            files, params = read_sources.read_from(CURRENT_DIR, no_logger=True)
        IS_ANA_SIM = all((read_sources.is_analog(file) for file, _ in files))
        # load the simulator script
        if IS_DIG_SIM and not IS_ANA_SIM:
            tool_path = utils.find_tool(config["DIG_SIMULATOR_TOOL"])
            sys.path.append(os.path.dirname(tool_path))
            simulator = import_module(config["DIG_SIMULATOR_TOOL"])
        elif IS_ANA_SIM and not IS_DIG_SIM:
            tool_path = utils.find_tool(config["ANA_SIMULATOR_TOOL"])
            sys.path.append(os.path.dirname(tool_path))
            simulator = import_module(config["ANA_SIMULATOR_TOOL"])
        else:
            relog.error("Not yet implementd mixed signal simulation")
        # execute simulation
        t_start = time.time() * 1000.0
        stats = simulator.main(files, params)
        t_end = time.time() * 1000.0
        # store statistics
        with open(os.path.join(utils.get_tmp_folder(), "./sim.stats"), "w+") as fp:
            fp.write("%s\n" % datetime.now())
            fp.write("Warnings: %d\n" % stats[0])
            fp.write("Errors: %d\n" % stats[1])
            fp.write("Sim. Time: %d\n" % (t_end - t_start))
    # show waveforms
    if args.view_sim:
        # load the simulator script
        tool_path = utils.find_tool(config["WAVEFORM_VIEWER"])
        sys.path.append(os.path.dirname(tool_path))
        waveform = import_module(config["WAVEFORM_VIEWER"])
        # execute
        waveform.main("vcd")
    # synthesis
    if args.synth:
        relog.step("Listing files")
        files, params = read_sources.read_from(CURRENT_DIR)
        # load the simulator script
        tool_path = utils.find_tool(config["DIG_SYNTHESIS_TOOL"])
        sys.path.append(os.path.dirname(tool_path))
        synthesizor = import_module(config["DIG_SYNTHESIS_TOOL"])
        # execute
        synthesizor.main(files, params, "verilog")
    # generate an html report
    if args.report:
        relog.warning("Not yet implemented")
        # define working directory
        os.environ["WORK_DIR"] = os.path.join(CURRENT_DIR, "./.tmp_report/")
        # read all stats
        db_batch = {}
        for stats_path in Path(CURRENT_DIR).rglob("**/*.stats"):
            with open(stats_path, "r+") as fp:
                db_sim = dict((line.split(':', 1) for i, line in enumerate(fp) if ':' in line and i > 0))
            for k, v in db_sim.items():
                tmp = db_batch[k] if k in db_batch else 0
                try:
                    db_batch[k] = float(v) + tmp
                except ValueError:
                    relog.error("%s values should be number" % stats_path)
    # code coverage
    if args.cov:
        relog.warning("Not yet implemented")
    # view coverage
    if args.view_cov:
        relog.warning("Not yet implemented")
